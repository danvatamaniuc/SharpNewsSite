using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics.Contracts;
using System.Xml;
using MyData.domain;
using MyData.utils;


namespace MyData.repos
{
    public abstract class AbstractRepository<E> : CRUDRepository<E>
    {
        protected int LastId;
        private ArrayList entities = new ArrayList();
        private Validator<E> validator;

        private String storageFile;
        

        protected AbstractRepository()
        {
            LastId = 0;

            //define the XML filename
            storageFile = Constants.ResourceFilesPath;
            storageFile = storageFile + GetNameForGenericE() + "Storage.xml";
        }

        public void SetXMLFilename(String filename)
        {
            //change the current XML filename
//            storageFile = Constants.ResourceFilesPath;
            storageFile = filename;
        }

        public void SetValidator(Validator<E> validator)
        {
            this.validator = validator;
        }

        public abstract void SetEntityId(E e);

        public void Save(E e)
        {
            validator.Validate(e);

            LastId++;
            SetEntityId(e);

            entities.Add(e);
        }

        public ArrayList GetAll()
        {
            return entities;
        }

//      XML IO

        public void SaveAllToXML()
        {
            //prepare the settings used for the XML file
            XmlWriterSettings settings = new XmlWriterSettings();
            settings.Indent = true;

            //create the writer to write into the file
            XmlWriter writer = XmlWriter.Create(storageFile, settings);
            //append the start tag to the document
            writer.WriteStartDocument();

            //disclaimer
            writer.WriteComment("This file is generated by the program.");

            //get the properties of the object
            var properties = GetTypeForGenericE().GetProperties();

            writer.WriteStartElement("objects");
            foreach (var entity in entities)
            {

                //add the object tag
                writer.WriteStartElement(GetNameForGenericE());

                foreach (var property in properties)
                {
                    //get the field name and value
                    var fieldName = property.Name;
                    var fieldValue = property.GetValue(entity).ToString();

                    writer.WriteElementString(fieldName, fieldValue);
                }

                //end object tag
                writer.WriteEndElement();

            }

            //end the parent element
            writer.WriteEndElement();

            writer.Flush();
            writer.Close();
        }

//      reflection methods

        private Type GetTypeForGenericE()
        {
            return typeof (E);
        }

        private String GetNameForGenericE()
        {
            return GetTypeForGenericE().Name.ToLower();
        }
        
    }
}